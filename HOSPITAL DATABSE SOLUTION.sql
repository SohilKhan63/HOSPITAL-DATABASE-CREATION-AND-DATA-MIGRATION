CREATE DATABASE HOSPITAL_DB;
USE HOSPITAL_DB;

-- ===================== CREATETION OF TABLES ===========================
-- CREATE DEPARTMENT TABLE
CREATE TABLE DEPARTMENT
(
	DEPARTMENT_ID INT PRIMARY KEY IDENTITY(1,2) NOT NULL,
	NAME VARCHAR(100) NOT NULL
);

-- CREATE DOCTORS TABLE
CREATE TABLE DOCTORS
(
	DOCTOR_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	DOCTOR_NAME VARCHAR(100),
	SPECIALIZATION VARCHAR(100),
	ROLE VARCHAR(50),
	DEPARTMENT_ID INT NOT NULL,
	CONSTRAINT FK_DOCTORS_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
);

-- CREATE PATIENTS TABLE
CREATE TABLE PATIENTS
(
	PATIENTS_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	NAME VARCHAR(100),
	DOB DATE,
	GENDER VARCHAR(1) CHECK (GENDER IN ('M', 'F', 'O')),
	MOB_NUM VARCHAR(20)
);

-- CREATE APPOINTMENT TABLE
CREATE TABLE APPOINTMENT
(
	APPOINTMENT_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	PATITENT_ID INT,
	DOCTOR_ID INT,
	APPOINTMENT_TIME DATETIME,
	STATUS VARCHAR(50) CHECK (STATUS IN ('SCHEDULED', 'COMPLETED', 'CANCELLED')),
	CONSTRAINT FK_APPOINTMENT_PATITENT_ID FOREIGN KEY (PATITENT_ID) REFERENCES PATIENTS(PATIENTS_ID),
	CONSTRAINT FK_APPOINTMENT_DOCTOR_ID FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID)
);

ALTER TABLE APPOINTMENT
DROP CONSTRAINT CK__APPOINTME__STATU__5165187F;  

ALTER TABLE APPOINTMENT
ADD CONSTRAINT CK_APPOINTMENT_STATUS
CHECK (STATUS IN ('SCHEDULED', 'COMPLETED', 'CANCELLED'));

-- CREATE PRESCRIPTION TABLE
CREATE TABLE PRESCRIPTION
(
	PRESCRIPTION_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	APPOINTMENT_ID INT,
	MEDICATION VARCHAR(200),
	DOSAGE VARCHAR(200)
	CONSTRAINT FK_PRESCRIPTION_APPOINTMENT_ID FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENT(APPOINTMENT_ID)
);

-- CREATE BILLS TABLE
CREATE TABLE BILLS
(
	BILL_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL, 
	APPOINTMENT_ID INT,
	AMOUNT DECIMAL(15,2),
	PAID TINYINT,
	BILL_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT FK_BILLS_APPOINTMENT_ID FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENT(APPOINTMENT_ID)
);

-- CREATE LABORATORY TABLE
CREATE TABLE LABORATORY
(
	REPORT_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	APPOINTMENT_ID INT,
	REPORT_DATA TEXT,
	CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT FK_LABORATORY_APPOINTMENT_ID FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENT(APPOINTMENT_ID)
);


-- ===================== INSERTATION OF DATA INTO TABLES ===============================

-- INSERTING DATA INTO DEPARTMENT TABLE
SELECT 
CONCAT('SELECT ', STRING_AGG(COLUMN_NAME, ','),' FROM hospital_data') AS COLUMNS
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME = 'hospital_data'
	AND COLUMN_NAME LIKE 'Departments_%';

SET IDENTITY_INSERT DEPARTMENT ON ;
	INSERT INTO DEPARTMENT ([DEPARTMENT_ID], [NAME] )
	SELECT Departments_DepartmentID,Departments_Name FROM hospital_data
	WHERE Departments_DepartmentID IS NOT NULL
SET IDENTITY_INSERT DEPARTMENT OFF ;


-- INSERTING DATA INTO PATIENTS TABLE
SELECT 
CONCAT('SELECT ', STRING_AGG(COLUMN_NAME, ','),' FROM hospital_data') AS COLUMNS
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME = 'hospital_data'
	AND COLUMN_NAME LIKE 'PATIENTS%';

SET IDENTITY_INSERT [dbo].[PATIENTS] ON ;
	INSERT INTO [dbo].[PATIENTS] ([DOB], [GENDER] , [NAME], [PATIENTS_ID], [MOB_NUM])
	SELECT Patients_DateOfBirth,Patients_Gender,Patients_Name,Patients_PatientID,Patients_Phone 
	FROM hospital_data	
	WHERE Patients_PatientID IS NOT NULL
SET IDENTITY_INSERT [dbo].[PATIENTS] OFF ;

-- INSERTING DATA INTO DOCTORS TABLE
SELECT 
CONCAT('SELECT ', STRING_AGG(COLUMN_NAME, ','),' FROM hospital_data') AS COLUMNS
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME = 'hospital_data'
	AND COLUMN_NAME LIKE 'DOCTORS_%';

SET IDENTITY_INSERT [dbo].[DOCTORS] ON ;
	INSERT INTO [dbo].[DOCTORS] ([DEPARTMENT_ID], [DOCTOR_ID] , [DOCTOR_NAME], [ROLE], [SPECIALIZATION])
	SELECT Doctors_DepartmentID,Doctors_DoctorID,Doctors_Name,Doctors_Role,Doctors_Specialization 
	FROM hospital_data
	WHERE Doctors_DoctorID IS NOT NULL
SET IDENTITY_INSERT [dbo].[DOCTORS] OFF ;

-- INSERTING DATA INTO APPOINTMENT TABLE
SELECT 
CONCAT('SELECT ', STRING_AGG(COLUMN_NAME, ','),' FROM hospital_data') AS COLUMNS
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME = 'hospital_data'
	AND COLUMN_NAME LIKE 'APPOINTMENT_%';

SET IDENTITY_INSERT [dbo].[APPOINTMENT] ON ;
	INSERT INTO [dbo].[APPOINTMENT] ([APPOINTMENT_ID], [APPOINTMENT_TIME] , [DOCTOR_ID], [PATITENT_ID], [STATUS])
	SELECT Appointments_AppointmentID,Appointments_AppointmentTime,Appointments_DoctorID,Appointments_PatientID,Appointments_Status 
	FROM hospital_data
	WHERE Appointments_AppointmentID IS NOT NULL
SET IDENTITY_INSERT [dbo].[APPOINTMENT] OFF ;

-- INSERTING DATA INTO BILLS TABLE
SELECT 
CONCAT('SELECT ', STRING_AGG(COLUMN_NAME, ','),' FROM hospital_data') AS COLUMNS
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME = 'hospital_data'
	AND COLUMN_NAME LIKE 'BILLS_%';

SET IDENTITY_INSERT BILLS ON ;
	INSERT INTO [dbo].[BILLS] ([AMOUNT], [APPOINTMENT_ID] , [BILL_DATE], [BILL_ID], [PAID])
	SELECT Bills_Amount,Bills_AppointmentID,Bills_BillDate,Bills_BillID,Bills_Paid FROM hospital_data
	WHERE Bills_AppointmentID IS NOT NULL
SET IDENTITY_INSERT BILLS OFF ;

-- INSERTING DATA INTO PRESCRIPTION TABLE
SELECT 
CONCAT('SELECT ', STRING_AGG(COLUMN_NAME, ','),' FROM hospital_data') AS COLUMNS
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME = 'hospital_data'
	AND COLUMN_NAME LIKE 'PRESCRIPTION_%';

SET IDENTITY_INSERT [dbo].[PRESCRIPTION] ON ;
	INSERT INTO [dbo].[PRESCRIPTION] ([APPOINTMENT_ID], [DOSAGE] , [MEDICATION], [PRESCRIPTION_ID])
	SELECT Prescriptions_AppointmentID,Prescriptions_Dosage,Prescriptions_Medication,Prescriptions_PrescriptionID 
	FROM hospital_data
	WHERE Prescriptions_PrescriptionID IS NOT NULL
SET IDENTITY_INSERT [dbo].[PRESCRIPTION] OFF ;


-- INSERTING DATA INTO LABORATORY TABLE
SELECT 
CONCAT('SELECT ', STRING_AGG(COLUMN_NAME, ','),' FROM hospital_data') AS COLUMNS
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME = 'hospital_data'
	AND COLUMN_NAME LIKE 'LABORATORY_%';

SET IDENTITY_INSERT [dbo].[LABORATORY] ON ;
	INSERT INTO [dbo].[LABORATORY] ([REPORT_ID], [APPOINTMENT_ID], [REPORT_DATA], [CREATED_AT]) 
	SELECT LabReports_ReportID, LabReports_AppointmentID, LabReports_ReportData , LabReports_CreatedAt
	FROM [dbo].[hospital_data]
	WHERE LabReports_ReportID IS NOT NULL;
SET IDENTITY_INSERT [dbo].[LABORATORY] OFF;
GO


-- DOCTORS ARE OCCASIONALLY DOUBLE BOOKED, AND APPOINTMENTS ARE BEING SCHEDULED IN THE PAST
CREATE TRIGGER trg_CheckAppointmentTime
ON dbo.APPOINTMENT
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (
        SELECT * 
        FROM inserted
        WHERE APPOINTMENT_TIME < GETDATE())
    BEGIN
        RAISERROR('Cannot schedule appointment in the past.', 16, 1);
        ROLLBACK TRANSACTION;
        RETURN;
    END
	-------
	    IF EXISTS (
        SELECT 1
        FROM inserted AS i
        JOIN dbo.APPOINTMENT AS a
          ON i.DOCTOR_ID = a.DOCTOR_ID
         AND i.APPOINTMENT_TIME = a.APPOINTMENT_TIME
		 AND A.STATUS IN ('SCHEDULED')
    )
    BEGIN
        RAISERROR('Doctor already has an appointment at this time.', 16, 1);
        ROLLBACK TRANSACTION;
        RETURN;
    END

    -- Insert valid rows
    INSERT INTO dbo.APPOINTMENT (APPOINTMENT_ID, PATITENT_ID, DOCTOR_ID, APPOINTMENT_TIME, STATUS)
    SELECT APPOINTMENT_ID, PATITENT_ID, DOCTOR_ID, APPOINTMENT_TIME, STATUS
    FROM inserted;
END;
GO

-- IMPLEMENT A WAY THAT GENERATES MONTHLY REVENUE REPORTS BY DEPARTMENTS
CREATE PROCEDURE SP_MONTHLY_REVENUE (@YEAR INT, @MONTH INT)
AS
BEGIN
	SELECT 
		DEP.NAME AS DEPARTMENTS,
		SUM(B.AMOUNT) AS MONTLHY_REVENUE
	FROM BILLS AS B
		INNER JOIN APPOINTMENT AS A
		ON A.APPOINTMENT_ID = B.APPOINTMENT_ID
		INNER JOIN DOCTORS AS D
		ON D.DOCTOR_ID = A.DOCTOR_ID
		INNER JOIN DEPARTMENT AS DEP
		ON DEP.DEPARTMENT_ID = D.DEPARTMENT_ID
	WHERE MONTH(B.BILL_DATE) = @MONTH AND YEAR(BILL_DATE) = @YEAR
	GROUP BY DEP.NAME
	ORDER BY MONTLHY_REVENUE DESC;
END;
GO 

EXEC SP_MONTHLY_REVENUE 2025, 3;







